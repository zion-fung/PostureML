{"id":"node_modules/@tensorflow-models/posenet/dist/resnet.js","dependencies":[{"name":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\package.json","includedInParent":true,"mtime":1572066226653},{"name":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\.babelrc","includedInParent":true,"mtime":1572066226615},{"name":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\package.json","includedInParent":true,"mtime":1572066943609},{"name":"./base_model","loc":{"line":16,"column":27},"parent":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\resnet.js","resolved":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\base_model.js"}],"generated":{"js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_model_1 = require(\"./base_model\");\r\nvar imageNetMean = [-123.15, -115.90, -103.06];\r\nvar ResNet = (function (_super) {\r\n    __extends(ResNet, _super);\r\n    function ResNet() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ResNet.prototype.preprocessInput = function (input) {\r\n        return input.add(imageNetMean);\r\n    };\r\n    ResNet.prototype.nameOutputResults = function (results) {\r\n        var displacementFwd = results[0], displacementBwd = results[1], offsets = results[2], heatmap = results[3];\r\n        return { offsets: offsets, heatmap: heatmap, displacementFwd: displacementFwd, displacementBwd: displacementBwd };\r\n    };\r\n    return ResNet;\r\n}(base_model_1.BaseModel));\r\nexports.ResNet = ResNet;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/resnet.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}}],"sources":{"node_modules/@tensorflow-models/posenet/dist/resnet.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_model_1 = require(\"./base_model\");\r\nvar imageNetMean = [-123.15, -115.90, -103.06];\r\nvar ResNet = (function (_super) {\r\n    __extends(ResNet, _super);\r\n    function ResNet() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ResNet.prototype.preprocessInput = function (input) {\r\n        return input.add(imageNetMean);\r\n    };\r\n    ResNet.prototype.nameOutputResults = function (results) {\r\n        var displacementFwd = results[0], displacementBwd = results[1], offsets = results[2], heatmap = results[3];\r\n        return { offsets: offsets, heatmap: heatmap, displacementFwd: displacementFwd, displacementBwd: displacementBwd };\r\n    };\r\n    return ResNet;\r\n}(base_model_1.BaseModel));\r\nexports.ResNet = ResNet;\r\n"},"lineCount":33}},"error":null,"hash":"6d2562781ed1fff4b5c20d0e4a6432fc","cacheData":{"env":{}}}