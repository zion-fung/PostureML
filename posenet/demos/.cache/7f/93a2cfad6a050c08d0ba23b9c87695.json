{"id":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","dependencies":[{"name":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\package.json","includedInParent":true,"mtime":1572066226653},{"name":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\.babelrc","includedInParent":true,"mtime":1572066226615},{"name":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\package.json","includedInParent":true,"mtime":1572066943609},{"name":"@tensorflow/tfjs-converter","loc":{"line":49,"column":21},"parent":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\posenet_model.js","resolved":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow\\tfjs-converter\\dist\\tf-converter.esm.js"},{"name":"@tensorflow/tfjs-core","loc":{"line":50,"column":17},"parent":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\posenet_model.js","resolved":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow\\tfjs-core\\dist\\tf-core.esm.js"},{"name":"./checkpoints","loc":{"line":51,"column":28},"parent":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\posenet_model.js","resolved":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\checkpoints.js"},{"name":"./mobilenet","loc":{"line":52,"column":26},"parent":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\posenet_model.js","resolved":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\mobilenet.js"},{"name":"./multi_pose/decode_multiple_poses","loc":{"line":53,"column":38},"parent":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\posenet_model.js","resolved":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\multi_pose\\decode_multiple_poses.js"},{"name":"./resnet","loc":{"line":54,"column":23},"parent":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\posenet_model.js","resolved":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\resnet.js"},{"name":"./single_pose/decode_single_pose","loc":{"line":55,"column":35},"parent":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\posenet_model.js","resolved":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\single_pose\\decode_single_pose.js"},{"name":"./util","loc":{"line":56,"column":21},"parent":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\posenet_model.js","resolved":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\util.js"}],"generated":{"js":"\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tfconv = require(\"@tensorflow/tfjs-converter\");\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\nvar checkpoints_1 = require(\"./checkpoints\");\r\nvar mobilenet_1 = require(\"./mobilenet\");\r\nvar decode_multiple_poses_1 = require(\"./multi_pose/decode_multiple_poses\");\r\nvar resnet_1 = require(\"./resnet\");\r\nvar decode_single_pose_1 = require(\"./single_pose/decode_single_pose\");\r\nvar util_1 = require(\"./util\");\r\nvar MOBILENET_V1_CONFIG = {\r\n    architecture: 'MobileNetV1',\r\n    outputStride: 16,\r\n    multiplier: 0.75,\r\n    inputResolution: 257,\r\n};\r\nvar VALID_ARCHITECTURE = ['MobileNetV1', 'ResNet50'];\r\nvar VALID_STRIDE = {\r\n    'MobileNetV1': [8, 16, 32],\r\n    'ResNet50': [32, 16]\r\n};\r\nvar VALID_MULTIPLIER = {\r\n    'MobileNetV1': [0.50, 0.75, 1.0],\r\n    'ResNet50': [1.0]\r\n};\r\nvar VALID_QUANT_BYTES = [1, 2, 4];\r\nfunction validateModelConfig(config) {\r\n    config = config || MOBILENET_V1_CONFIG;\r\n    if (config.architecture == null) {\r\n        config.architecture = 'MobileNetV1';\r\n    }\r\n    if (VALID_ARCHITECTURE.indexOf(config.architecture) < 0) {\r\n        throw new Error(\"Invalid architecture \" + config.architecture + \". \" +\r\n            (\"Should be one of \" + VALID_ARCHITECTURE));\r\n    }\r\n    if (config.inputResolution == null) {\r\n        config.inputResolution = 257;\r\n    }\r\n    util_1.validateInputResolution(config.inputResolution);\r\n    if (config.outputStride == null) {\r\n        config.outputStride = 16;\r\n    }\r\n    if (VALID_STRIDE[config.architecture].indexOf(config.outputStride) < 0) {\r\n        throw new Error(\"Invalid outputStride \" + config.outputStride + \". \" +\r\n            (\"Should be one of \" + VALID_STRIDE[config.architecture] + \" \") +\r\n            (\"for architecutre \" + config.architecture + \".\"));\r\n    }\r\n    if (config.multiplier == null) {\r\n        config.multiplier = 1.0;\r\n    }\r\n    if (VALID_MULTIPLIER[config.architecture].indexOf(config.multiplier) < 0) {\r\n        throw new Error(\"Invalid multiplier \" + config.multiplier + \". \" +\r\n            (\"Should be one of \" + VALID_MULTIPLIER[config.architecture] + \" \") +\r\n            (\"for architecutre \" + config.architecture + \".\"));\r\n    }\r\n    if (config.quantBytes == null) {\r\n        config.quantBytes = 4;\r\n    }\r\n    if (VALID_QUANT_BYTES.indexOf(config.quantBytes) < 0) {\r\n        throw new Error(\"Invalid quantBytes \" + config.quantBytes + \". \" +\r\n            (\"Should be one of \" + VALID_QUANT_BYTES + \" \") +\r\n            (\"for architecutre \" + config.architecture + \".\"));\r\n    }\r\n    return config;\r\n}\r\nexports.SINGLE_PERSON_INFERENCE_CONFIG = {\r\n    flipHorizontal: false\r\n};\r\nexports.MULTI_PERSON_INFERENCE_CONFIG = {\r\n    flipHorizontal: false,\r\n    maxDetections: 5,\r\n    scoreThreshold: 0.5,\r\n    nmsRadius: 20\r\n};\r\nfunction validateSinglePersonInferenceConfig(config) { }\r\nfunction validateMultiPersonInputConfig(config) {\r\n    var maxDetections = config.maxDetections, scoreThreshold = config.scoreThreshold, nmsRadius = config.nmsRadius;\r\n    if (maxDetections <= 0) {\r\n        throw new Error(\"Invalid maxDetections \" + maxDetections + \". \" +\r\n            \"Should be > 0\");\r\n    }\r\n    if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\r\n        throw new Error(\"Invalid scoreThreshold \" + scoreThreshold + \". \" +\r\n            \"Should be in range [0.0, 1.0]\");\r\n    }\r\n    if (nmsRadius <= 0) {\r\n        throw new Error(\"Invalid nmsRadius \" + nmsRadius + \".\");\r\n    }\r\n}\r\nvar PoseNet = (function () {\r\n    function PoseNet(net, inputResolution) {\r\n        util_1.assertValidOutputStride(net.outputStride);\r\n        util_1.assertValidResolution(inputResolution, net.outputStride);\r\n        this.baseModel = net;\r\n        this.inputResolution = inputResolution;\r\n    }\r\n    PoseNet.prototype.estimateMultiplePoses = function (input, config) {\r\n        if (config === void 0) { config = exports.MULTI_PERSON_INFERENCE_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var configWithDefaults, outputStride, inputResolution, _a, height, width, _b, resized, padding, _c, heatmapScores, offsets, displacementFwd, displacementBwd, allTensorBuffers, scoresBuffer, offsetsBuffer, displacementsFwdBuffer, displacementsBwdBuffer, poses, resultPoses;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        configWithDefaults = __assign({}, exports.MULTI_PERSON_INFERENCE_CONFIG, config);\r\n                        validateMultiPersonInputConfig(config);\r\n                        outputStride = this.baseModel.outputStride;\r\n                        inputResolution = this.inputResolution;\r\n                        _a = util_1.getInputTensorDimensions(input), height = _a[0], width = _a[1];\r\n                        _b = util_1.padAndResizeTo(input, inputResolution), resized = _b.resized, padding = _b.padding;\r\n                        _c = this.baseModel.predict(resized), heatmapScores = _c.heatmapScores, offsets = _c.offsets, displacementFwd = _c.displacementFwd, displacementBwd = _c.displacementBwd;\r\n                        return [4, util_1.toTensorBuffers3D([heatmapScores, offsets, displacementFwd, displacementBwd])];\r\n                    case 1:\r\n                        allTensorBuffers = _d.sent();\r\n                        scoresBuffer = allTensorBuffers[0];\r\n                        offsetsBuffer = allTensorBuffers[1];\r\n                        displacementsFwdBuffer = allTensorBuffers[2];\r\n                        displacementsBwdBuffer = allTensorBuffers[3];\r\n                        return [4, decode_multiple_poses_1.decodeMultiplePoses(scoresBuffer, offsetsBuffer, displacementsFwdBuffer, displacementsBwdBuffer, outputStride, configWithDefaults.maxDetections, configWithDefaults.scoreThreshold, configWithDefaults.nmsRadius)];\r\n                    case 2:\r\n                        poses = _d.sent();\r\n                        resultPoses = util_1.scaleAndFlipPoses(poses, [height, width], inputResolution, padding, configWithDefaults.flipHorizontal);\r\n                        heatmapScores.dispose();\r\n                        offsets.dispose();\r\n                        displacementFwd.dispose();\r\n                        displacementBwd.dispose();\r\n                        resized.dispose();\r\n                        return [2, resultPoses];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PoseNet.prototype.estimateSinglePose = function (input, config) {\r\n        if (config === void 0) { config = exports.SINGLE_PERSON_INFERENCE_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var configWithDefaults, outputStride, inputResolution, _a, height, width, _b, resized, padding, _c, heatmapScores, offsets, displacementFwd, displacementBwd, pose, poses, resultPoses;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        configWithDefaults = __assign({}, exports.SINGLE_PERSON_INFERENCE_CONFIG, config);\r\n                        validateSinglePersonInferenceConfig(configWithDefaults);\r\n                        outputStride = this.baseModel.outputStride;\r\n                        inputResolution = this.inputResolution;\r\n                        _a = util_1.getInputTensorDimensions(input), height = _a[0], width = _a[1];\r\n                        _b = util_1.padAndResizeTo(input, inputResolution), resized = _b.resized, padding = _b.padding;\r\n                        _c = this.baseModel.predict(resized), heatmapScores = _c.heatmapScores, offsets = _c.offsets, displacementFwd = _c.displacementFwd, displacementBwd = _c.displacementBwd;\r\n                        return [4, decode_single_pose_1.decodeSinglePose(heatmapScores, offsets, outputStride)];\r\n                    case 1:\r\n                        pose = _d.sent();\r\n                        poses = [pose];\r\n                        resultPoses = util_1.scaleAndFlipPoses(poses, [height, width], inputResolution, padding, configWithDefaults.flipHorizontal);\r\n                        heatmapScores.dispose();\r\n                        offsets.dispose();\r\n                        displacementFwd.dispose();\r\n                        displacementBwd.dispose();\r\n                        resized.dispose();\r\n                        return [2, resultPoses[0]];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PoseNet.prototype.estimatePoses = function (input, config) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pose;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!(config.decodingMethod === 'single-person')) return [3, 2];\r\n                        return [4, this.estimateSinglePose(input, config)];\r\n                    case 1:\r\n                        pose = _a.sent();\r\n                        return [2, [pose]];\r\n                    case 2: return [2, this.estimateMultiplePoses(input, config)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PoseNet.prototype.dispose = function () {\r\n        this.baseModel.dispose();\r\n    };\r\n    return PoseNet;\r\n}());\r\nexports.PoseNet = PoseNet;\r\nfunction loadMobileNet(config) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var outputStride, quantBytes, multiplier, url, graphModel, mobilenet, validInputResolution;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    outputStride = config.outputStride;\r\n                    quantBytes = config.quantBytes;\r\n                    multiplier = config.multiplier;\r\n                    if (tf == null) {\r\n                        throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please \" +\r\n                            \"also include @tensorflow/tfjs on the page before using this\\n        model.\");\r\n                    }\r\n                    url = checkpoints_1.mobileNetCheckpoint(outputStride, multiplier, quantBytes);\r\n                    return [4, tfconv.loadGraphModel(config.modelUrl || url)];\r\n                case 1:\r\n                    graphModel = _a.sent();\r\n                    mobilenet = new mobilenet_1.MobileNet(graphModel, outputStride);\r\n                    validInputResolution = util_1.getValidInputResolutionDimensions(config.inputResolution, mobilenet.outputStride);\r\n                    return [2, new PoseNet(mobilenet, validInputResolution)];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction loadResNet(config) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var outputStride, quantBytes, url, graphModel, resnet, validInputResolution;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    outputStride = config.outputStride;\r\n                    quantBytes = config.quantBytes;\r\n                    if (tf == null) {\r\n                        throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please \" +\r\n                            \"also include @tensorflow/tfjs on the page before using this\\n        model.\");\r\n                    }\r\n                    url = checkpoints_1.resNet50Checkpoint(outputStride, quantBytes);\r\n                    return [4, tfconv.loadGraphModel(config.modelUrl || url)];\r\n                case 1:\r\n                    graphModel = _a.sent();\r\n                    resnet = new resnet_1.ResNet(graphModel, outputStride);\r\n                    validInputResolution = util_1.getValidInputResolutionDimensions(config.inputResolution, resnet.outputStride);\r\n                    return [2, new PoseNet(resnet, validInputResolution)];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction load(config) {\r\n    if (config === void 0) { config = MOBILENET_V1_CONFIG; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            config = validateModelConfig(config);\r\n            if (config.architecture === 'ResNet50') {\r\n                return [2, loadResNet(config)];\r\n            }\r\n            else if (config.architecture === 'MobileNetV1') {\r\n                return [2, loadMobileNet(config)];\r\n            }\r\n            else {\r\n                return [2, null];\r\n            }\r\n            return [2];\r\n        });\r\n    });\r\n}\r\nexports.load = load;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/posenet_model.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}}],"sources":{"node_modules/@tensorflow-models/posenet/dist/posenet_model.js":"\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tfconv = require(\"@tensorflow/tfjs-converter\");\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\nvar checkpoints_1 = require(\"./checkpoints\");\r\nvar mobilenet_1 = require(\"./mobilenet\");\r\nvar decode_multiple_poses_1 = require(\"./multi_pose/decode_multiple_poses\");\r\nvar resnet_1 = require(\"./resnet\");\r\nvar decode_single_pose_1 = require(\"./single_pose/decode_single_pose\");\r\nvar util_1 = require(\"./util\");\r\nvar MOBILENET_V1_CONFIG = {\r\n    architecture: 'MobileNetV1',\r\n    outputStride: 16,\r\n    multiplier: 0.75,\r\n    inputResolution: 257,\r\n};\r\nvar VALID_ARCHITECTURE = ['MobileNetV1', 'ResNet50'];\r\nvar VALID_STRIDE = {\r\n    'MobileNetV1': [8, 16, 32],\r\n    'ResNet50': [32, 16]\r\n};\r\nvar VALID_MULTIPLIER = {\r\n    'MobileNetV1': [0.50, 0.75, 1.0],\r\n    'ResNet50': [1.0]\r\n};\r\nvar VALID_QUANT_BYTES = [1, 2, 4];\r\nfunction validateModelConfig(config) {\r\n    config = config || MOBILENET_V1_CONFIG;\r\n    if (config.architecture == null) {\r\n        config.architecture = 'MobileNetV1';\r\n    }\r\n    if (VALID_ARCHITECTURE.indexOf(config.architecture) < 0) {\r\n        throw new Error(\"Invalid architecture \" + config.architecture + \". \" +\r\n            (\"Should be one of \" + VALID_ARCHITECTURE));\r\n    }\r\n    if (config.inputResolution == null) {\r\n        config.inputResolution = 257;\r\n    }\r\n    util_1.validateInputResolution(config.inputResolution);\r\n    if (config.outputStride == null) {\r\n        config.outputStride = 16;\r\n    }\r\n    if (VALID_STRIDE[config.architecture].indexOf(config.outputStride) < 0) {\r\n        throw new Error(\"Invalid outputStride \" + config.outputStride + \". \" +\r\n            (\"Should be one of \" + VALID_STRIDE[config.architecture] + \" \") +\r\n            (\"for architecutre \" + config.architecture + \".\"));\r\n    }\r\n    if (config.multiplier == null) {\r\n        config.multiplier = 1.0;\r\n    }\r\n    if (VALID_MULTIPLIER[config.architecture].indexOf(config.multiplier) < 0) {\r\n        throw new Error(\"Invalid multiplier \" + config.multiplier + \". \" +\r\n            (\"Should be one of \" + VALID_MULTIPLIER[config.architecture] + \" \") +\r\n            (\"for architecutre \" + config.architecture + \".\"));\r\n    }\r\n    if (config.quantBytes == null) {\r\n        config.quantBytes = 4;\r\n    }\r\n    if (VALID_QUANT_BYTES.indexOf(config.quantBytes) < 0) {\r\n        throw new Error(\"Invalid quantBytes \" + config.quantBytes + \". \" +\r\n            (\"Should be one of \" + VALID_QUANT_BYTES + \" \") +\r\n            (\"for architecutre \" + config.architecture + \".\"));\r\n    }\r\n    return config;\r\n}\r\nexports.SINGLE_PERSON_INFERENCE_CONFIG = {\r\n    flipHorizontal: false\r\n};\r\nexports.MULTI_PERSON_INFERENCE_CONFIG = {\r\n    flipHorizontal: false,\r\n    maxDetections: 5,\r\n    scoreThreshold: 0.5,\r\n    nmsRadius: 20\r\n};\r\nfunction validateSinglePersonInferenceConfig(config) { }\r\nfunction validateMultiPersonInputConfig(config) {\r\n    var maxDetections = config.maxDetections, scoreThreshold = config.scoreThreshold, nmsRadius = config.nmsRadius;\r\n    if (maxDetections <= 0) {\r\n        throw new Error(\"Invalid maxDetections \" + maxDetections + \". \" +\r\n            \"Should be > 0\");\r\n    }\r\n    if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\r\n        throw new Error(\"Invalid scoreThreshold \" + scoreThreshold + \". \" +\r\n            \"Should be in range [0.0, 1.0]\");\r\n    }\r\n    if (nmsRadius <= 0) {\r\n        throw new Error(\"Invalid nmsRadius \" + nmsRadius + \".\");\r\n    }\r\n}\r\nvar PoseNet = (function () {\r\n    function PoseNet(net, inputResolution) {\r\n        util_1.assertValidOutputStride(net.outputStride);\r\n        util_1.assertValidResolution(inputResolution, net.outputStride);\r\n        this.baseModel = net;\r\n        this.inputResolution = inputResolution;\r\n    }\r\n    PoseNet.prototype.estimateMultiplePoses = function (input, config) {\r\n        if (config === void 0) { config = exports.MULTI_PERSON_INFERENCE_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var configWithDefaults, outputStride, inputResolution, _a, height, width, _b, resized, padding, _c, heatmapScores, offsets, displacementFwd, displacementBwd, allTensorBuffers, scoresBuffer, offsetsBuffer, displacementsFwdBuffer, displacementsBwdBuffer, poses, resultPoses;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        configWithDefaults = __assign({}, exports.MULTI_PERSON_INFERENCE_CONFIG, config);\r\n                        validateMultiPersonInputConfig(config);\r\n                        outputStride = this.baseModel.outputStride;\r\n                        inputResolution = this.inputResolution;\r\n                        _a = util_1.getInputTensorDimensions(input), height = _a[0], width = _a[1];\r\n                        _b = util_1.padAndResizeTo(input, inputResolution), resized = _b.resized, padding = _b.padding;\r\n                        _c = this.baseModel.predict(resized), heatmapScores = _c.heatmapScores, offsets = _c.offsets, displacementFwd = _c.displacementFwd, displacementBwd = _c.displacementBwd;\r\n                        return [4, util_1.toTensorBuffers3D([heatmapScores, offsets, displacementFwd, displacementBwd])];\r\n                    case 1:\r\n                        allTensorBuffers = _d.sent();\r\n                        scoresBuffer = allTensorBuffers[0];\r\n                        offsetsBuffer = allTensorBuffers[1];\r\n                        displacementsFwdBuffer = allTensorBuffers[2];\r\n                        displacementsBwdBuffer = allTensorBuffers[3];\r\n                        return [4, decode_multiple_poses_1.decodeMultiplePoses(scoresBuffer, offsetsBuffer, displacementsFwdBuffer, displacementsBwdBuffer, outputStride, configWithDefaults.maxDetections, configWithDefaults.scoreThreshold, configWithDefaults.nmsRadius)];\r\n                    case 2:\r\n                        poses = _d.sent();\r\n                        resultPoses = util_1.scaleAndFlipPoses(poses, [height, width], inputResolution, padding, configWithDefaults.flipHorizontal);\r\n                        heatmapScores.dispose();\r\n                        offsets.dispose();\r\n                        displacementFwd.dispose();\r\n                        displacementBwd.dispose();\r\n                        resized.dispose();\r\n                        return [2, resultPoses];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PoseNet.prototype.estimateSinglePose = function (input, config) {\r\n        if (config === void 0) { config = exports.SINGLE_PERSON_INFERENCE_CONFIG; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var configWithDefaults, outputStride, inputResolution, _a, height, width, _b, resized, padding, _c, heatmapScores, offsets, displacementFwd, displacementBwd, pose, poses, resultPoses;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        configWithDefaults = __assign({}, exports.SINGLE_PERSON_INFERENCE_CONFIG, config);\r\n                        validateSinglePersonInferenceConfig(configWithDefaults);\r\n                        outputStride = this.baseModel.outputStride;\r\n                        inputResolution = this.inputResolution;\r\n                        _a = util_1.getInputTensorDimensions(input), height = _a[0], width = _a[1];\r\n                        _b = util_1.padAndResizeTo(input, inputResolution), resized = _b.resized, padding = _b.padding;\r\n                        _c = this.baseModel.predict(resized), heatmapScores = _c.heatmapScores, offsets = _c.offsets, displacementFwd = _c.displacementFwd, displacementBwd = _c.displacementBwd;\r\n                        return [4, decode_single_pose_1.decodeSinglePose(heatmapScores, offsets, outputStride)];\r\n                    case 1:\r\n                        pose = _d.sent();\r\n                        poses = [pose];\r\n                        resultPoses = util_1.scaleAndFlipPoses(poses, [height, width], inputResolution, padding, configWithDefaults.flipHorizontal);\r\n                        heatmapScores.dispose();\r\n                        offsets.dispose();\r\n                        displacementFwd.dispose();\r\n                        displacementBwd.dispose();\r\n                        resized.dispose();\r\n                        return [2, resultPoses[0]];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PoseNet.prototype.estimatePoses = function (input, config) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pose;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!(config.decodingMethod === 'single-person')) return [3, 2];\r\n                        return [4, this.estimateSinglePose(input, config)];\r\n                    case 1:\r\n                        pose = _a.sent();\r\n                        return [2, [pose]];\r\n                    case 2: return [2, this.estimateMultiplePoses(input, config)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PoseNet.prototype.dispose = function () {\r\n        this.baseModel.dispose();\r\n    };\r\n    return PoseNet;\r\n}());\r\nexports.PoseNet = PoseNet;\r\nfunction loadMobileNet(config) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var outputStride, quantBytes, multiplier, url, graphModel, mobilenet, validInputResolution;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    outputStride = config.outputStride;\r\n                    quantBytes = config.quantBytes;\r\n                    multiplier = config.multiplier;\r\n                    if (tf == null) {\r\n                        throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please \" +\r\n                            \"also include @tensorflow/tfjs on the page before using this\\n        model.\");\r\n                    }\r\n                    url = checkpoints_1.mobileNetCheckpoint(outputStride, multiplier, quantBytes);\r\n                    return [4, tfconv.loadGraphModel(config.modelUrl || url)];\r\n                case 1:\r\n                    graphModel = _a.sent();\r\n                    mobilenet = new mobilenet_1.MobileNet(graphModel, outputStride);\r\n                    validInputResolution = util_1.getValidInputResolutionDimensions(config.inputResolution, mobilenet.outputStride);\r\n                    return [2, new PoseNet(mobilenet, validInputResolution)];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction loadResNet(config) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var outputStride, quantBytes, url, graphModel, resnet, validInputResolution;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    outputStride = config.outputStride;\r\n                    quantBytes = config.quantBytes;\r\n                    if (tf == null) {\r\n                        throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please \" +\r\n                            \"also include @tensorflow/tfjs on the page before using this\\n        model.\");\r\n                    }\r\n                    url = checkpoints_1.resNet50Checkpoint(outputStride, quantBytes);\r\n                    return [4, tfconv.loadGraphModel(config.modelUrl || url)];\r\n                case 1:\r\n                    graphModel = _a.sent();\r\n                    resnet = new resnet_1.ResNet(graphModel, outputStride);\r\n                    validInputResolution = util_1.getValidInputResolutionDimensions(config.inputResolution, resnet.outputStride);\r\n                    return [2, new PoseNet(resnet, validInputResolution)];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction load(config) {\r\n    if (config === void 0) { config = MOBILENET_V1_CONFIG; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            config = validateModelConfig(config);\r\n            if (config.architecture === 'ResNet50') {\r\n                return [2, loadResNet(config)];\r\n            }\r\n            else if (config.architecture === 'MobileNetV1') {\r\n                return [2, loadMobileNet(config)];\r\n            }\r\n            else {\r\n                return [2, null];\r\n            }\r\n            return [2];\r\n        });\r\n    });\r\n}\r\nexports.load = load;\r\n"},"lineCount":295}},"error":null,"hash":"b7f337355cc77f78c9ab631cf6cbc0c3","cacheData":{"env":{}}}