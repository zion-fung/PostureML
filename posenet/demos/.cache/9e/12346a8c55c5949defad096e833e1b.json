{"id":"node_modules/@tensorflow-models/posenet/dist/util.js","dependencies":[{"name":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\package.json","includedInParent":true,"mtime":1572066226653},{"name":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\.babelrc","includedInParent":true,"mtime":1572066226615},{"name":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\package.json","includedInParent":true,"mtime":1572066943609},{"name":"@tensorflow/tfjs-core","loc":{"line":38,"column":17},"parent":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\util.js","resolved":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow\\tfjs-core\\dist\\tf-core.esm.js"},{"name":"./keypoints","loc":{"line":39,"column":26},"parent":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\util.js","resolved":"C:\\Users\\Zion\\Documents\\github\\tfjs-models\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\dist\\keypoints.js"}],"generated":{"js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\nvar keypoints_1 = require(\"./keypoints\");\r\nfunction eitherPointDoesntMeetConfidence(a, b, minConfidence) {\r\n    return (a < minConfidence || b < minConfidence);\r\n}\r\nfunction getAdjacentKeyPoints(keypoints, minConfidence) {\r\n    return keypoints_1.connectedPartIndices.reduce(function (result, _a) {\r\n        var leftJoint = _a[0], rightJoint = _a[1];\r\n        if (eitherPointDoesntMeetConfidence(keypoints[leftJoint].score, keypoints[rightJoint].score, minConfidence)) {\r\n            return result;\r\n        }\r\n        result.push([keypoints[leftJoint], keypoints[rightJoint]]);\r\n        return result;\r\n    }, []);\r\n}\r\nexports.getAdjacentKeyPoints = getAdjacentKeyPoints;\r\nvar NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY, POSITIVE_INFINITY = Number.POSITIVE_INFINITY;\r\nfunction getBoundingBox(keypoints) {\r\n    return keypoints.reduce(function (_a, _b) {\r\n        var maxX = _a.maxX, maxY = _a.maxY, minX = _a.minX, minY = _a.minY;\r\n        var _c = _b.position, x = _c.x, y = _c.y;\r\n        return {\r\n            maxX: Math.max(maxX, x),\r\n            maxY: Math.max(maxY, y),\r\n            minX: Math.min(minX, x),\r\n            minY: Math.min(minY, y)\r\n        };\r\n    }, {\r\n        maxX: NEGATIVE_INFINITY,\r\n        maxY: NEGATIVE_INFINITY,\r\n        minX: POSITIVE_INFINITY,\r\n        minY: POSITIVE_INFINITY\r\n    });\r\n}\r\nexports.getBoundingBox = getBoundingBox;\r\nfunction getBoundingBoxPoints(keypoints) {\r\n    var _a = getBoundingBox(keypoints), minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\r\n    return [\r\n        { x: minX, y: minY }, { x: maxX, y: minY }, { x: maxX, y: maxY },\r\n        { x: minX, y: maxY }\r\n    ];\r\n}\r\nexports.getBoundingBoxPoints = getBoundingBoxPoints;\r\nfunction toTensorBuffers3D(tensors) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            return [2, Promise.all(tensors.map(function (tensor) { return tensor.buffer(); }))];\r\n        });\r\n    });\r\n}\r\nexports.toTensorBuffers3D = toTensorBuffers3D;\r\nfunction scalePose(pose, scaleY, scaleX, offsetY, offsetX) {\r\n    if (offsetY === void 0) { offsetY = 0; }\r\n    if (offsetX === void 0) { offsetX = 0; }\r\n    return {\r\n        score: pose.score,\r\n        keypoints: pose.keypoints.map(function (_a) {\r\n            var score = _a.score, part = _a.part, position = _a.position;\r\n            return ({\r\n                score: score,\r\n                part: part,\r\n                position: {\r\n                    x: position.x * scaleX + offsetX,\r\n                    y: position.y * scaleY + offsetY\r\n                }\r\n            });\r\n        })\r\n    };\r\n}\r\nexports.scalePose = scalePose;\r\nfunction scalePoses(poses, scaleY, scaleX, offsetY, offsetX) {\r\n    if (offsetY === void 0) { offsetY = 0; }\r\n    if (offsetX === void 0) { offsetX = 0; }\r\n    if (scaleX === 1 && scaleY === 1 && offsetY === 0 && offsetX === 0) {\r\n        return poses;\r\n    }\r\n    return poses.map(function (pose) { return scalePose(pose, scaleY, scaleX, offsetY, offsetX); });\r\n}\r\nexports.scalePoses = scalePoses;\r\nfunction flipPoseHorizontal(pose, imageWidth) {\r\n    return {\r\n        score: pose.score,\r\n        keypoints: pose.keypoints.map(function (_a) {\r\n            var score = _a.score, part = _a.part, position = _a.position;\r\n            return ({\r\n                score: score,\r\n                part: part,\r\n                position: { x: imageWidth - 1 - position.x, y: position.y }\r\n            });\r\n        })\r\n    };\r\n}\r\nexports.flipPoseHorizontal = flipPoseHorizontal;\r\nfunction flipPosesHorizontal(poses, imageWidth) {\r\n    if (imageWidth <= 0) {\r\n        return poses;\r\n    }\r\n    return poses.map(function (pose) { return flipPoseHorizontal(pose, imageWidth); });\r\n}\r\nexports.flipPosesHorizontal = flipPosesHorizontal;\r\nfunction toValidInputResolution(inputResolution, outputStride) {\r\n    if (isValidInputResolution(inputResolution, outputStride)) {\r\n        return inputResolution;\r\n    }\r\n    return Math.floor(inputResolution / outputStride) * outputStride + 1;\r\n}\r\nexports.toValidInputResolution = toValidInputResolution;\r\nfunction validateInputResolution(inputResolution) {\r\n    tf.util.assert(typeof inputResolution === 'number' ||\r\n        typeof inputResolution === 'object', function () { return \"Invalid inputResolution \" + inputResolution + \". \" +\r\n        \"Should be a number or an object with width and height\"; });\r\n    if (typeof inputResolution === 'object') {\r\n        tf.util.assert(typeof inputResolution.width === 'number', function () { return \"inputResolution.width has a value of \" + inputResolution.width + \" which is invalid; it must be a number\"; });\r\n        tf.util.assert(typeof inputResolution.height === 'number', function () { return \"inputResolution.height has a value of \" + inputResolution.height + \" which is invalid; it must be a number\"; });\r\n    }\r\n}\r\nexports.validateInputResolution = validateInputResolution;\r\nfunction getValidInputResolutionDimensions(inputResolution, outputStride) {\r\n    validateInputResolution(inputResolution);\r\n    if (typeof inputResolution === 'object') {\r\n        return [\r\n            toValidInputResolution(inputResolution.height, outputStride),\r\n            toValidInputResolution(inputResolution.width, outputStride),\r\n        ];\r\n    }\r\n    else {\r\n        return [\r\n            toValidInputResolution(inputResolution, outputStride),\r\n            toValidInputResolution(inputResolution, outputStride),\r\n        ];\r\n    }\r\n}\r\nexports.getValidInputResolutionDimensions = getValidInputResolutionDimensions;\r\nvar VALID_OUTPUT_STRIDES = [8, 16, 32];\r\nfunction assertValidOutputStride(outputStride) {\r\n    tf.util.assert(typeof outputStride === 'number', function () { return 'outputStride is not a number'; });\r\n    tf.util.assert(VALID_OUTPUT_STRIDES.indexOf(outputStride) >= 0, function () { return \"outputStride of \" + outputStride + \" is invalid. \" +\r\n        \"It must be either 8, 16, or 32\"; });\r\n}\r\nexports.assertValidOutputStride = assertValidOutputStride;\r\nfunction isValidInputResolution(resolution, outputStride) {\r\n    return (resolution - 1) % outputStride === 0;\r\n}\r\nfunction assertValidResolution(resolution, outputStride) {\r\n    tf.util.assert(typeof resolution[0] === 'number' && typeof resolution[1] === 'number', function () { return \"both resolution values must be a number but had values \" + resolution; });\r\n    tf.util.assert(isValidInputResolution(resolution[0], outputStride), function () { return \"height of \" + resolution[0] + \" is invalid for output stride \" +\r\n        (outputStride + \".\"); });\r\n    tf.util.assert(isValidInputResolution(resolution[1], outputStride), function () { return \"width of \" + resolution[1] + \" is invalid for output stride \" +\r\n        (outputStride + \".\"); });\r\n}\r\nexports.assertValidResolution = assertValidResolution;\r\nfunction getInputTensorDimensions(input) {\r\n    return input instanceof tf.Tensor ? [input.shape[0], input.shape[1]] :\r\n        [input.height, input.width];\r\n}\r\nexports.getInputTensorDimensions = getInputTensorDimensions;\r\nfunction toInputTensor(input) {\r\n    return input instanceof tf.Tensor ? input : tf.browser.fromPixels(input);\r\n}\r\nexports.toInputTensor = toInputTensor;\r\nfunction toResizedInputTensor(input, resizeHeight, resizeWidth, flipHorizontal) {\r\n    return tf.tidy(function () {\r\n        var imageTensor = toInputTensor(input);\r\n        if (flipHorizontal) {\r\n            return imageTensor.reverse(1).resizeBilinear([resizeHeight, resizeWidth]);\r\n        }\r\n        else {\r\n            return imageTensor.resizeBilinear([resizeHeight, resizeWidth]);\r\n        }\r\n    });\r\n}\r\nexports.toResizedInputTensor = toResizedInputTensor;\r\nfunction padAndResizeTo(input, _a) {\r\n    var targetH = _a[0], targetW = _a[1];\r\n    var _b = getInputTensorDimensions(input), height = _b[0], width = _b[1];\r\n    var targetAspect = targetW / targetH;\r\n    var aspect = width / height;\r\n    var _c = [0, 0, 0, 0], padT = _c[0], padB = _c[1], padL = _c[2], padR = _c[3];\r\n    if (aspect < targetAspect) {\r\n        padT = 0;\r\n        padB = 0;\r\n        padL = Math.round(0.5 * (targetAspect * height - width));\r\n        padR = Math.round(0.5 * (targetAspect * height - width));\r\n    }\r\n    else {\r\n        padT = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\r\n        padB = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\r\n        padL = 0;\r\n        padR = 0;\r\n    }\r\n    var resized = tf.tidy(function () {\r\n        var imageTensor = toInputTensor(input);\r\n        imageTensor = tf.pad3d(imageTensor, [[padT, padB], [padL, padR], [0, 0]]);\r\n        return imageTensor.resizeBilinear([targetH, targetW]);\r\n    });\r\n    return { resized: resized, padding: { top: padT, left: padL, right: padR, bottom: padB } };\r\n}\r\nexports.padAndResizeTo = padAndResizeTo;\r\nfunction scaleAndFlipPoses(poses, _a, _b, padding, flipHorizontal) {\r\n    var height = _a[0], width = _a[1];\r\n    var inputResolutionHeight = _b[0], inputResolutionWidth = _b[1];\r\n    var scaleY = (height + padding.top + padding.bottom) / (inputResolutionHeight);\r\n    var scaleX = (width + padding.left + padding.right) / (inputResolutionWidth);\r\n    var scaledPoses = scalePoses(poses, scaleY, scaleX, -padding.top, -padding.left);\r\n    if (flipHorizontal) {\r\n        return flipPosesHorizontal(scaledPoses, width);\r\n    }\r\n    else {\r\n        return scaledPoses;\r\n    }\r\n}\r\nexports.scaleAndFlipPoses = scaleAndFlipPoses;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@tensorflow-models/posenet/dist/util.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}}],"sources":{"node_modules/@tensorflow-models/posenet/dist/util.js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\nvar keypoints_1 = require(\"./keypoints\");\r\nfunction eitherPointDoesntMeetConfidence(a, b, minConfidence) {\r\n    return (a < minConfidence || b < minConfidence);\r\n}\r\nfunction getAdjacentKeyPoints(keypoints, minConfidence) {\r\n    return keypoints_1.connectedPartIndices.reduce(function (result, _a) {\r\n        var leftJoint = _a[0], rightJoint = _a[1];\r\n        if (eitherPointDoesntMeetConfidence(keypoints[leftJoint].score, keypoints[rightJoint].score, minConfidence)) {\r\n            return result;\r\n        }\r\n        result.push([keypoints[leftJoint], keypoints[rightJoint]]);\r\n        return result;\r\n    }, []);\r\n}\r\nexports.getAdjacentKeyPoints = getAdjacentKeyPoints;\r\nvar NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY, POSITIVE_INFINITY = Number.POSITIVE_INFINITY;\r\nfunction getBoundingBox(keypoints) {\r\n    return keypoints.reduce(function (_a, _b) {\r\n        var maxX = _a.maxX, maxY = _a.maxY, minX = _a.minX, minY = _a.minY;\r\n        var _c = _b.position, x = _c.x, y = _c.y;\r\n        return {\r\n            maxX: Math.max(maxX, x),\r\n            maxY: Math.max(maxY, y),\r\n            minX: Math.min(minX, x),\r\n            minY: Math.min(minY, y)\r\n        };\r\n    }, {\r\n        maxX: NEGATIVE_INFINITY,\r\n        maxY: NEGATIVE_INFINITY,\r\n        minX: POSITIVE_INFINITY,\r\n        minY: POSITIVE_INFINITY\r\n    });\r\n}\r\nexports.getBoundingBox = getBoundingBox;\r\nfunction getBoundingBoxPoints(keypoints) {\r\n    var _a = getBoundingBox(keypoints), minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\r\n    return [\r\n        { x: minX, y: minY }, { x: maxX, y: minY }, { x: maxX, y: maxY },\r\n        { x: minX, y: maxY }\r\n    ];\r\n}\r\nexports.getBoundingBoxPoints = getBoundingBoxPoints;\r\nfunction toTensorBuffers3D(tensors) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            return [2, Promise.all(tensors.map(function (tensor) { return tensor.buffer(); }))];\r\n        });\r\n    });\r\n}\r\nexports.toTensorBuffers3D = toTensorBuffers3D;\r\nfunction scalePose(pose, scaleY, scaleX, offsetY, offsetX) {\r\n    if (offsetY === void 0) { offsetY = 0; }\r\n    if (offsetX === void 0) { offsetX = 0; }\r\n    return {\r\n        score: pose.score,\r\n        keypoints: pose.keypoints.map(function (_a) {\r\n            var score = _a.score, part = _a.part, position = _a.position;\r\n            return ({\r\n                score: score,\r\n                part: part,\r\n                position: {\r\n                    x: position.x * scaleX + offsetX,\r\n                    y: position.y * scaleY + offsetY\r\n                }\r\n            });\r\n        })\r\n    };\r\n}\r\nexports.scalePose = scalePose;\r\nfunction scalePoses(poses, scaleY, scaleX, offsetY, offsetX) {\r\n    if (offsetY === void 0) { offsetY = 0; }\r\n    if (offsetX === void 0) { offsetX = 0; }\r\n    if (scaleX === 1 && scaleY === 1 && offsetY === 0 && offsetX === 0) {\r\n        return poses;\r\n    }\r\n    return poses.map(function (pose) { return scalePose(pose, scaleY, scaleX, offsetY, offsetX); });\r\n}\r\nexports.scalePoses = scalePoses;\r\nfunction flipPoseHorizontal(pose, imageWidth) {\r\n    return {\r\n        score: pose.score,\r\n        keypoints: pose.keypoints.map(function (_a) {\r\n            var score = _a.score, part = _a.part, position = _a.position;\r\n            return ({\r\n                score: score,\r\n                part: part,\r\n                position: { x: imageWidth - 1 - position.x, y: position.y }\r\n            });\r\n        })\r\n    };\r\n}\r\nexports.flipPoseHorizontal = flipPoseHorizontal;\r\nfunction flipPosesHorizontal(poses, imageWidth) {\r\n    if (imageWidth <= 0) {\r\n        return poses;\r\n    }\r\n    return poses.map(function (pose) { return flipPoseHorizontal(pose, imageWidth); });\r\n}\r\nexports.flipPosesHorizontal = flipPosesHorizontal;\r\nfunction toValidInputResolution(inputResolution, outputStride) {\r\n    if (isValidInputResolution(inputResolution, outputStride)) {\r\n        return inputResolution;\r\n    }\r\n    return Math.floor(inputResolution / outputStride) * outputStride + 1;\r\n}\r\nexports.toValidInputResolution = toValidInputResolution;\r\nfunction validateInputResolution(inputResolution) {\r\n    tf.util.assert(typeof inputResolution === 'number' ||\r\n        typeof inputResolution === 'object', function () { return \"Invalid inputResolution \" + inputResolution + \". \" +\r\n        \"Should be a number or an object with width and height\"; });\r\n    if (typeof inputResolution === 'object') {\r\n        tf.util.assert(typeof inputResolution.width === 'number', function () { return \"inputResolution.width has a value of \" + inputResolution.width + \" which is invalid; it must be a number\"; });\r\n        tf.util.assert(typeof inputResolution.height === 'number', function () { return \"inputResolution.height has a value of \" + inputResolution.height + \" which is invalid; it must be a number\"; });\r\n    }\r\n}\r\nexports.validateInputResolution = validateInputResolution;\r\nfunction getValidInputResolutionDimensions(inputResolution, outputStride) {\r\n    validateInputResolution(inputResolution);\r\n    if (typeof inputResolution === 'object') {\r\n        return [\r\n            toValidInputResolution(inputResolution.height, outputStride),\r\n            toValidInputResolution(inputResolution.width, outputStride),\r\n        ];\r\n    }\r\n    else {\r\n        return [\r\n            toValidInputResolution(inputResolution, outputStride),\r\n            toValidInputResolution(inputResolution, outputStride),\r\n        ];\r\n    }\r\n}\r\nexports.getValidInputResolutionDimensions = getValidInputResolutionDimensions;\r\nvar VALID_OUTPUT_STRIDES = [8, 16, 32];\r\nfunction assertValidOutputStride(outputStride) {\r\n    tf.util.assert(typeof outputStride === 'number', function () { return 'outputStride is not a number'; });\r\n    tf.util.assert(VALID_OUTPUT_STRIDES.indexOf(outputStride) >= 0, function () { return \"outputStride of \" + outputStride + \" is invalid. \" +\r\n        \"It must be either 8, 16, or 32\"; });\r\n}\r\nexports.assertValidOutputStride = assertValidOutputStride;\r\nfunction isValidInputResolution(resolution, outputStride) {\r\n    return (resolution - 1) % outputStride === 0;\r\n}\r\nfunction assertValidResolution(resolution, outputStride) {\r\n    tf.util.assert(typeof resolution[0] === 'number' && typeof resolution[1] === 'number', function () { return \"both resolution values must be a number but had values \" + resolution; });\r\n    tf.util.assert(isValidInputResolution(resolution[0], outputStride), function () { return \"height of \" + resolution[0] + \" is invalid for output stride \" +\r\n        (outputStride + \".\"); });\r\n    tf.util.assert(isValidInputResolution(resolution[1], outputStride), function () { return \"width of \" + resolution[1] + \" is invalid for output stride \" +\r\n        (outputStride + \".\"); });\r\n}\r\nexports.assertValidResolution = assertValidResolution;\r\nfunction getInputTensorDimensions(input) {\r\n    return input instanceof tf.Tensor ? [input.shape[0], input.shape[1]] :\r\n        [input.height, input.width];\r\n}\r\nexports.getInputTensorDimensions = getInputTensorDimensions;\r\nfunction toInputTensor(input) {\r\n    return input instanceof tf.Tensor ? input : tf.browser.fromPixels(input);\r\n}\r\nexports.toInputTensor = toInputTensor;\r\nfunction toResizedInputTensor(input, resizeHeight, resizeWidth, flipHorizontal) {\r\n    return tf.tidy(function () {\r\n        var imageTensor = toInputTensor(input);\r\n        if (flipHorizontal) {\r\n            return imageTensor.reverse(1).resizeBilinear([resizeHeight, resizeWidth]);\r\n        }\r\n        else {\r\n            return imageTensor.resizeBilinear([resizeHeight, resizeWidth]);\r\n        }\r\n    });\r\n}\r\nexports.toResizedInputTensor = toResizedInputTensor;\r\nfunction padAndResizeTo(input, _a) {\r\n    var targetH = _a[0], targetW = _a[1];\r\n    var _b = getInputTensorDimensions(input), height = _b[0], width = _b[1];\r\n    var targetAspect = targetW / targetH;\r\n    var aspect = width / height;\r\n    var _c = [0, 0, 0, 0], padT = _c[0], padB = _c[1], padL = _c[2], padR = _c[3];\r\n    if (aspect < targetAspect) {\r\n        padT = 0;\r\n        padB = 0;\r\n        padL = Math.round(0.5 * (targetAspect * height - width));\r\n        padR = Math.round(0.5 * (targetAspect * height - width));\r\n    }\r\n    else {\r\n        padT = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\r\n        padB = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\r\n        padL = 0;\r\n        padR = 0;\r\n    }\r\n    var resized = tf.tidy(function () {\r\n        var imageTensor = toInputTensor(input);\r\n        imageTensor = tf.pad3d(imageTensor, [[padT, padB], [padL, padR], [0, 0]]);\r\n        return imageTensor.resizeBilinear([targetH, targetW]);\r\n    });\r\n    return { resized: resized, padding: { top: padT, left: padL, right: padR, bottom: padB } };\r\n}\r\nexports.padAndResizeTo = padAndResizeTo;\r\nfunction scaleAndFlipPoses(poses, _a, _b, padding, flipHorizontal) {\r\n    var height = _a[0], width = _a[1];\r\n    var inputResolutionHeight = _b[0], inputResolutionWidth = _b[1];\r\n    var scaleY = (height + padding.top + padding.bottom) / (inputResolutionHeight);\r\n    var scaleX = (width + padding.left + padding.right) / (inputResolutionWidth);\r\n    var scaledPoses = scalePoses(poses, scaleY, scaleX, -padding.top, -padding.left);\r\n    if (flipHorizontal) {\r\n        return flipPosesHorizontal(scaledPoses, width);\r\n    }\r\n    else {\r\n        return scaledPoses;\r\n    }\r\n}\r\nexports.scaleAndFlipPoses = scaleAndFlipPoses;\r\n"},"lineCount":250}},"error":null,"hash":"87e1862f67ed9ff598084586e909e3f5","cacheData":{"env":{}}}